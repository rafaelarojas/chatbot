import rclpy
from rclpy.node import Node
import re
import unicodedata
from std_msgs.msg import String

# Dicion√°rio de inten√ß√µes (inten√ß√£o -> descri√ß√£o)
intentions = {
    "secretaria": "Ir para a secretaria",
    "laboratorio": "Ir para o laborat√≥rio",
    "biblioteca": "Ir para a biblioteca",
    "atelie": "Ir para o ateli√™",
    "andre": "Ir at√© o Andr√© para encher o saco dele",
    "refeitorio": "Ir para o refeit√≥rio",   
    "recepcao": "Ir para a recep√ß√£o",
    "arquibancada": "Ir para a arquibancada",
    "auditorio": "Ir para o audit√≥rio",
}

# Dicion√°rio de a√ß√µes (inten√ß√£o -> fun√ß√£o)
actions = {
    "secretaria": lambda: "O rob√¥ est√° indo para a secretaria...",
    "laboratorio": lambda: "O rob√¥ est√° indo para o laborat√≥rio...",
    "biblioteca": lambda: "O rob√¥ est√° indo para a biblioteca...",
    "atelie": lambda: "O rob√¥ est√° indo para o ateli√™...",
    "andre": lambda: "O rob√¥ est√° indo at√© o Andr√© para encher o saco dele...",
    "refeitorio": lambda: "O rob√¥ est√° indo para o refeit√≥rio...",
    "recepcao": lambda: "O rob√¥ est√° indo para a recep√ß√£o...",
    "arquibancada": lambda: "O rob√¥ est√° indo para a arquibancada...",
    "auditorio": lambda: "O rob√¥ est√° indo para o audit√≥rio...",
}

# Express√µes regulares para compreender varia√ß√µes de comandos
command_patterns = {
    "secretaria": re.compile(r"(v√° ?para ?a ?secretaria|dirija-se ?a ?secretaria|secretaria|me ?leve ?para ?a ?secretaria|quero ?ir ?para ?a ?secretaria|secretaria, ?por ?favor|onde ?fica ?a ?secretaria|levar-me ?√† ?secretaria|pode ?me ?levar ?√† ?secretaria|ir ?at√© ?a ?secretaria|va ?para ?a ?secretaria)", re.IGNORECASE),
    "laboratorio": re.compile(r"(v√° ?para ?o ?laborat√≥rio|dirija-se ?ao ?laborat√≥rio|laborat√≥rio|me ?leve ?para ?o ?laborat√≥rio|onde ?fica ?o ?laborat√≥rio|laborat√≥rio, ?por ?favor|levar-me ?ao ?laborat√≥rio|pode ?me ?levar ?ao ?laborat√≥rio|ir ?at√© ?o ?laborat√≥rio|quero ?ir ?para ?o ?laborat√≥rio|va ?para ?o ?laborat√≥rio)", re.IGNORECASE),
    "biblioteca": re.compile(r"(v√° ?para ?a ?biblioteca|dirija-se ?a ?biblioteca|biblioteca|me ?leve ?para ?a ?biblioteca|onde ?fica ?a ?biblioteca|quero ?ir ?para ?a ?biblioteca|biblioteca, ?por ?favor|levar-me ?√† ?biblioteca|pode ?me ?levar ?√† ?biblioteca|ir ?at√© ?a ?biblioteca|va ?para ?a ?biblioteca)", re.IGNORECASE),
    "atelie": re.compile(r"(v√° ?para ?o ?ateli√™|dirija-se ?ao ?ateli√™|ateli√™|me ?leve ?para ?o ?ateli√™|onde ?fica ?o ?ateli√™|quero ?ir ?para ?o ?ateli√™|ateli√™, ?por ?favor|levar-me ?ao ?ateli√™|pode ?me ?levar ?ao ?ateli√™|ir ?at√© ?o ?ateli√™|va ?para ?o ?ateli√™)", re.IGNORECASE),
    "andre": re.compile(r"(v√° ?at√© ?o ?andr√© ?encher ?o ?saco ?dele|encontre ?o ?andr√©|v√° ?at√© ?o ?andr√©|ve ?ate ?o ?andre|ir ?ao ?andr√©|cad√™ ?o ?andr√©|me ?leve ?ao ?andr√©|onde ?est√° ?o ?andr√©|ache ?o ?andr√©|v√° ?falar ?com ?o ?andr√©|falar ?com ?o ?andr√©|quero ?ver ?o ?andr√©)", re.IGNORECASE),
    "refeitorio": re.compile(r"(v√° ?para ?o ?refeit√≥rio|dirija-se ?ao ?refeit√≥rio|refeit√≥rio|me ?leve ?para ?o ?refeit√≥rio|onde ?fica ?o ?refeit√≥rio|quero ?ir ?para ?o ?refeit√≥rio|refeit√≥rio, ?por ?favor|levar-me ?ao ?refeit√≥rio|pode ?me ?levar ?ao ?refeit√≥rio|ir ?at√© ?o ?refeit√≥rio|va ?para ?o ?refeit√≥rio)", re.IGNORECASE),
    "recepcao": re.compile(r"(v√° ?para ?a ?recep√ß√£o|dirija-se ?a ?recep√ß√£o|recep√ß√£o|me ?leve ?para ?a ?recep√ß√£o|onde ?fica ?a ?recep√ß√£o|quero ?ir ?para ?a ?recep√ß√£o|recep√ß√£o, ?por ?favor|levar-me ?√† ?recep√ß√£o|pode ?me ?levar ?√† ?recep√ß√£o|ir ?at√© ?a ?recep√ß√£o|va ?para ?a ?recep√ß√£o)", re.IGNORECASE),
    "arquibancada": re.compile(r"(v√° ?para ?a ?arquibancada|dirija-se ?a ?arquibancada|arquibancada|me ?leve ?para ?a ?arquibancada|onde ?fica ?a ?arquibancada|quero ?ir ?para ?a ?arquibancada|arquibancada, ?por ?favor|levar-me ?√† ?arquibancada|pode ?me ?levar ?√† ?arquibancada|ir ?at√© ?a ?arquibancada|va ?para ?a ?arquibancada)", re.IGNORECASE),
    "auditorio": re.compile(r"(v√° ?para ?o ?audit√≥rio|dirija-se ?ao ?audit√≥rio|audit√≥rio|me ?leve ?para ?o ?audit√≥rio|onde ?fica ?o ?audit√≥rio|quero ?ir ?para ?o ?audit√≥rio|audit√≥rio, ?por ?favor|levar-me ?ao ?audit√≥rio|pode ?me ?levar ?ao ?audit√≥rio|ir ?at√© ?o ?audit√≥rio|va ?para ?o ?audit√≥rio)", re.IGNORECASE),
}



def normalize_text(text):
    """
    Remove acentos, converte o texto para min√∫sculas e normaliza.
    """
    nfkd_form = unicodedata.normalize('NFKD', text)
    no_accents = ''.join([c for c in nfkd_form if not unicodedata.combining(c)])
    
    return no_accents.casefold()

class ChatbotNode(Node):
    def __init__(self):
        super().__init__('chatbot_node')
        self.publisher_ = self.create_publisher(String, 'chatbot_feedback', 10)
        self.get_logger().info("Chatbot do Rob√¥ de Servi√ßo iniciado.")
        self.print_welcome_message()

    def print_welcome_message(self):

        print("\033[1;34m" + "=" * 50)
        print("üîπ Bem-vindo ao INCHATBOT CAMPUSüîπ")
        print("=" * 50 + "\033[0m")
        print("\033[1;32mDigite 'sair' para encerrar o programa.\033[0m")

    def process_command(self, command):
        """
        Processa o comando do usu√°rio e executa a a√ß√£o correspondente.
        """
        normalized_command = normalize_text(command)
        for intention, pattern in command_patterns.items():
            if pattern.search(normalized_command):
                feedback = actions[intention]()
                self.get_logger().info(f"Inten√ß√£o: {intentions[intention]}")
                self.get_logger().info(feedback)

                # Publicar feedback no t√≥pico 'chatbot_feedback'
                msg = String()
                msg.data = f"Inten√ß√£o: {intentions[intention]}\n{feedback}"
                self.publisher_.publish(msg)

                print(f"\033[1;32m‚úî Comando compreendido: {intentions[intention]}\033[0m")
                print(f"\033[1;34müîπ {feedback}\033[0m")
                return

        self.get_logger().info("Desculpe, n√£o entendi o comando.")
        print("\033[1;31m‚úò N√£o consegui entender o comando. Tente novamente.\033[0m")

    def run(self):
        """
        Loop principal do chatbot.
        """
        while rclpy.ok():
            user_input = input("\033[1;36mComando do usu√°rio: \033[0m").strip()
            if user_input.lower() == 'sair':
                print("\033[1;33mEncerrando o chatbot. At√© logo! üëã\033[0m")
                self.get_logger().info("Chatbot encerrado pelo usu√°rio.")
                break
            self.process_command(user_input)

def main(args=None):
    rclpy.init(args=args)
    node = ChatbotNode()
    try:
        node.run()
    finally:
        node.destroy_node()
        rclpy.shutdown()
